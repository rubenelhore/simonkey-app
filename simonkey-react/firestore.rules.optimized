rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // FUNCIONES HELPER OPTIMIZADAS
    // ========================================
    
    // Cache del documento de usuario para reducir lecturas
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar si es el propietario del recurso
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Obtener tipo de suscripción del usuario
    function getUserSubscription() {
      return getUserData().subscription;
    }
    
    // Verificar si es super admin
    function isSuperAdmin() {
      return isAuthenticated() && (
        getUserSubscription() == 'super_admin' ||
        request.auth.token.email == 'ruben.elhore@gmail.com'
      );
    }
    
    // Verificar si es usuario escolar
    function isSchoolUser() {
      return isAuthenticated() && getUserSubscription() == 'school';
    }
    
    // Obtener rol escolar del usuario
    function getSchoolRole() {
      return isSchoolUser() ? getUserData().schoolRole : null;
    }
    
    // Verificar rol escolar específico
    function hasSchoolRole(role) {
      return isSchoolUser() && getSchoolRole() == role;
    }
    
    // Verificar si es admin o profesor escolar
    function isSchoolAdminOrTeacher() {
      return hasSchoolRole('admin') || hasSchoolRole('teacher');
    }
    
    // Verificar si pertenece a la misma institución
    function isSameInstitution(institutionId) {
      return isSchoolUser() && getUserData().idInstitucion == institutionId;
    }
    
    // Validar límites de suscripción para notebooks
    function canCreateNotebook() {
      let subscription = getUserSubscription();
      let userData = getUserData();
      
      // Super admin y school sin límites
      if (subscription == 'super_admin' || subscription == 'school') {
        return true;
      }
      
      // FREE: máximo 4 notebooks
      if (subscription == 'free') {
        return userData.notebookCount < 4;
      }
      
      // PRO: máximo 10 por semana
      if (subscription == 'pro') {
        return userData.notebooksCreatedThisWeek == null || 
               userData.notebooksCreatedThisWeek < 10;
      }
      
      return false;
    }
    
    // Validar campos requeridos en request
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Validar tipo de dato
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // Validar timestamp
    function isValidTimestamp(field) {
      return field is timestamp;
    }
    
    // Validar enum
    function isValidEnum(field, values) {
      return field in values;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: users
    // ========================================
    match /users/{userId} {
      // Lectura: propietario o super admin
      allow read: if isOwner(userId) || isSuperAdmin();
      
      // Creación: solo el propio usuario al registrarse
      allow create: if isOwner(userId) &&
        hasRequiredFields(['email', 'username', 'nombre', 'displayName', 'birthdate', 'subscription']) &&
        isValidString(request.resource.data.email, 254) &&
        isValidString(request.resource.data.username, 50) &&
        isValidString(request.resource.data.nombre, 100) &&
        isValidString(request.resource.data.displayName, 100) &&
        isValidEnum(request.resource.data.subscription, ['free', 'pro', 'school', 'university', 'super_admin']);
      
      // Actualización: propietario o super admin
      allow update: if (isOwner(userId) || isSuperAdmin()) &&
        // No permitir cambiar subscription excepto super admin
        (request.resource.data.subscription == resource.data.subscription || isSuperAdmin());
      
      // Eliminación: nunca directamente
      allow delete: if false;
      
      // Subcolecciones
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: notebooks
    // ========================================
    match /notebooks/{notebookId} {
      // Lectura
      allow read: if isAuthenticated() && (
        // Notebooks personales: solo propietario
        (resource.data.type == 'personal' && isOwner(resource.data.userId)) ||
        // Notebooks escolares
        (resource.data.type == 'school' && (
          // Profesores y admins de la misma escuela
          (isSchoolAdminOrTeacher() && isSameInstitution(resource.data.idEscuela)) ||
          // Estudiantes asignados
          (hasSchoolRole('student') && notebookId in getUserData().idCuadernos) ||
          // Tutores de estudiantes asignados
          (hasSchoolRole('tutor'))
        )) ||
        // Super admin
        isSuperAdmin()
      );
      
      // Creación
      allow create: if isAuthenticated() && (
        // Notebooks personales
        (request.resource.data.type == 'personal' && 
         isOwner(request.resource.data.userId) &&
         canCreateNotebook() &&
         hasRequiredFields(['title', 'color', 'type', 'userId']) &&
         isValidString(request.resource.data.title, 100)) ||
        // Notebooks escolares: solo profesores
        (request.resource.data.type == 'school' && 
         hasSchoolRole('teacher') &&
         hasRequiredFields(['title', 'color', 'type', 'idMateria', 'idProfesor']) &&
         request.resource.data.idProfesor == request.auth.uid)
      );
      
      // Actualización
      allow update: if isAuthenticated() && (
        // Notebooks personales: propietario
        (resource.data.type == 'personal' && isOwner(resource.data.userId)) ||
        // Notebooks escolares: profesor creador
        (resource.data.type == 'school' && 
         hasSchoolRole('teacher') && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      ) &&
      // No permitir cambiar tipo o propietario
      request.resource.data.type == resource.data.type &&
      (resource.data.userId == null || request.resource.data.userId == resource.data.userId);
      
      // Eliminación
      allow delete: if isAuthenticated() && (
        // Notebooks personales: propietario con permisos
        (resource.data.type == 'personal' && 
         isOwner(resource.data.userId) &&
         (getUserSubscription() != 'free' || resource.data.conceptCount == 0)) ||
        // Notebooks escolares: profesor creador
        (resource.data.type == 'school' && 
         hasSchoolRole('teacher') && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: conceptos
    // ========================================
    match /conceptos/{conceptId} {
      // Lectura: propietario del concepto
      allow read: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
      
      // Creación
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.usuarioId) &&
        hasRequiredFields(['término', 'definición', 'fuente', 'cuadernoId', 'usuarioId']) &&
        isValidString(request.resource.data.término, 200) &&
        isValidString(request.resource.data.definición, 2000) &&
        isValidString(request.resource.data.fuente, 500);
      
      // Actualización: propietario
      allow update: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) || 
        isSuperAdmin()
      ) &&
      // No permitir cambiar propietario o cuaderno
      request.resource.data.usuarioId == resource.data.usuarioId &&
      request.resource.data.cuadernoId == resource.data.cuadernoId;
      
      // Eliminación: propietario
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: studySessions
    // ========================================
    match /studySessions/{sessionId} {
      // Lectura: propietario de la sesión
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        // Profesores pueden ver sesiones de sus estudiantes
        (hasSchoolRole('teacher') && 
         get(/databases/$(database)/documents/users/$(resource.data.userId)).data.idInstitucion == getUserData().idInstitucion) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'notebookId', 'startTime', 'mode']) &&
        isValidEnum(request.resource.data.mode, ['smart', 'free', 'quiz']) &&
        isValidTimestamp(request.resource.data.startTime);
      
      // Actualización: solo para completar la sesión
      allow update: if isAuthenticated() &&
        isOwner(resource.data.userId) &&
        resource.data.completed == false &&
        request.resource.data.completed == true &&
        request.resource.data.endTime is timestamp;
      
      // Eliminación: nunca (inmutable)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: schoolExams
    // ========================================
    match /schoolExams/{examId} {
      // Lectura: usuarios de la misma escuela
      allow read: if isSchoolUser() && (
        isSameInstitution(resource.data.idEscuela) ||
        isSuperAdmin()
      );
      
      // Creación: solo profesores
      allow create: if hasSchoolRole('teacher') &&
        hasRequiredFields(['title', 'idMateria', 'idProfesor', 'idEscuela', 'questions', 'duration']) &&
        request.resource.data.idProfesor == request.auth.uid &&
        isValidString(request.resource.data.title, 200) &&
        request.resource.data.questions is list &&
        request.resource.data.duration is number;
      
      // Actualización: profesor creador
      allow update: if hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid;
      
      // Eliminación: profesor creador o admin escolar
      allow delete: if (
        (hasSchoolRole('teacher') && resource.data.idProfesor == request.auth.uid) ||
        (hasSchoolRole('admin') && isSameInstitution(resource.data.idEscuela)) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: examAttempts
    // ========================================
    match /examAttempts/{attemptId} {
      // Lectura: estudiante propietario o profesor
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) ||
        (hasSchoolRole('teacher') && 
         get(/databases/$(database)/documents/schoolExams/$(resource.data.examId)).data.idProfesor == request.auth.uid) ||
        (hasSchoolRole('admin') && 
         isSameInstitution(get(/databases/$(database)/documents/users/$(resource.data.studentId)).data.idInstitucion)) ||
        isSuperAdmin()
      );
      
      // Creación: estudiante tomando el examen
      allow create: if hasSchoolRole('student') &&
        isOwner(request.resource.data.studentId) &&
        hasRequiredFields(['examId', 'studentId', 'startTime']) &&
        // Verificar que el examen está activo
        get(/databases/$(database)/documents/schoolExams/$(request.resource.data.examId)).data.isActive == true;
      
      // Actualización: estudiante completando el examen
      allow update: if hasSchoolRole('student') &&
        isOwner(resource.data.studentId) &&
        resource.data.completed == false &&
        request.resource.data.completed == true;
      
      // Eliminación: nunca
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: materials
    // ========================================
    match /materials/{materialId} {
      // Lectura: propietario del material
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado con límites
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['name', 'type', 'size', 'url', 'notebookId', 'userId']) &&
        request.resource.data.size <= 10485760; // 10MB máximo
      
      // Actualización: propietario
      allow update: if isOwner(resource.data.userId) || isSuperAdmin();
      
      // Eliminación: propietario
      allow delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: calendarEvents
    // ========================================
    match /calendarEvents/{eventId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['title', 'date', 'userId']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: userActivities
    // ========================================
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: learningData
    // ========================================
    match /learningData/{dataId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['conceptId', 'userId', 'easeFactor', 'interval', 'repetitions']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: gameSessions
    // ========================================
    match /gameSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'gameType', 'score', 'startTime']);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DE KPIs
    // ========================================
    match /userKPIs/{userId} {
      allow read: if isOwner(userId) || 
        (hasSchoolRole('teacher') && 
         get(/databases/$(database)/documents/users/$(userId)).data.idInstitucion == getUserData().idInstitucion) ||
        isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /userStreaks/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /gamePoints/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /notebookPoints/{pointId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /quizStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /positionHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /conceptStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES ESCOLARES
    // ========================================
    match /schoolInstitutions/{institutionId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();
    }
    
    match /schoolSubjects/{subjectId} {
      allow read: if isSchoolUser();
      allow create: if hasSchoolRole('teacher') &&
        hasRequiredFields(['nombre', 'idProfesor']) &&
        request.resource.data.idProfesor == request.auth.uid;
      allow update, delete: if hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid ||
        isSuperAdmin();
    }
    
    match /schoolTeachers/{teacherId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolStudents/{studentId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || 
        hasSchoolRole('teacher') || 
        isSuperAdmin();
    }
    
    match /schoolTutors/{tutorId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolAdmins/{adminId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES LEGACY
    // ========================================
    match /schoolNotebooks/{notebookId} {
      allow read: if isSchoolUser();
      allow create, update: if isSchoolAdminOrTeacher();
      allow delete: if hasSchoolRole('teacher') || isSuperAdmin();
    }
    
    match /schoolConcepts/{conceptId} {
      allow read: if isSchoolUser();
      allow create, update, delete: if isSchoolAdminOrTeacher() || isSuperAdmin();
    }
    
    match /materias/{materiaId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /usuarios/{userId} {
      // Mantener compatibilidad con colección legacy
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if false;
      
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DEL SISTEMA
    // ========================================
    match /contactMessages/{messageId} {
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated() &&
        hasRequiredFields(['name', 'email', 'message', 'timestamp']);
      allow update, delete: if isSuperAdmin();
    }
    
    match /temporaryCredentials/{credentialId} {
      allow read: if hasSchoolRole('admin') || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /systemSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    match /systemLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userActivityBatch/{batchId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    match /reviewConcepts/{conceptId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLA DE SEGURIDAD POR DEFECTO
    // ========================================
    // Denegar todo acceso no especificado explícitamente
    match /{document=**} {
      allow read, write: if false;
    }
  }
}