rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // FUNCIONES HELPER OPTIMIZADAS
    // ========================================
    
    // Cache del documento de usuario para reducir lecturas
    function getUserData() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data
        : {};
    }
    
    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar si es el propietario del recurso
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Obtener tipo de suscripción del usuario
    function getUserSubscription() {
      return getUserData().subscription != null ? getUserData().subscription : 'free';
    }
    
    // Verificar si es super admin
    function isSuperAdmin() {
      return isAuthenticated() && (
        getUserSubscription() == 'super_admin' ||
        request.auth.token.email == 'ruben.elhore@gmail.com' ||
        request.auth.token.email == 'santiagoarceofel@gmail.com' ||
        request.auth.token.email == 'ruben@simonkey.ai'
      );
    }
    
    // Verificar si es profesor independiente
    function isTeacher() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isTeacher == true;
    }
    
    // Verificar si el usuario tiene isEnrolled en su perfil
    function isEnrolledUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isEnrolled == true;
    }
    
    // Validar límites de suscripción para notebooks
    function canCreateNotebook() {
      return getUserSubscription() == 'super_admin' || 
             getUserSubscription() == 'university' ||
             isTeacher() ||
             (getUserSubscription() == 'free' && 
              (getUserData().notebookCount == null || getUserData().notebookCount < 4)) ||
             getUserSubscription() == 'pro'; // PRO siempre puede crear
    }
    
    // Validar campos requeridos en request
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Validar tipo de dato string
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // Validar timestamp
    function isValidTimestamp(field) {
      return field is timestamp;
    }
    
    // Validar enum
    function isValidEnum(field, values) {
      return field in values;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: users
    // ========================================
    match /users/{userId} {
      // Lectura: SUPER ADMIN tiene acceso TOTAL sin restricciones
      allow read: if (request.auth != null && (
                        request.auth.token.email == 'santiagoarceofel@gmail.com' ||
                        request.auth.token.email == 'ruben.elhore@gmail.com' ||
                        request.auth.token.email == 'ruben@simonkey.ai'
                      )) ||
                     isOwner(userId) || 
                     // Permitir lectura pública de información básica de profesores
                     (resource != null && resource.data.isTeacher == true) ||
                     // Permitir a usuarios autenticados leer su propio documento por email
                     (isAuthenticated() && resource != null && 
                      resource.data.email == request.auth.token.email) ||
                     // Permitir a cualquier usuario autenticado leer info básica (para rankings)
                     isAuthenticated();
      
      // Creación: solo el propio usuario al registrarse
      allow create: if isOwner(userId) &&
        hasRequiredFields(['email', 'username', 'nombre', 'displayName', 'birthdate', 'subscription']) &&
        isValidString(request.resource.data.email, 254) &&
        isValidString(request.resource.data.username, 50) &&
        isValidString(request.resource.data.nombre, 100) &&
        isValidString(request.resource.data.displayName, 100) &&
        isValidEnum(request.resource.data.subscription, ['free', 'pro', 'university', 'super_admin']);
      
      // Actualización: propietario o super admin
      allow update: if (isOwner(userId) || isSuperAdmin()) &&
        // No permitir cambiar subscription excepto super admin
        (request.resource.data.subscription == resource.data.subscription || isSuperAdmin());
      
      // Eliminación: solo super admin
      allow delete: if isSuperAdmin();
      
      // Subcolección KPIs
      match /kpis/{kpiId} {
        allow read: if isOwner(userId) || isSuperAdmin() || isAuthenticated();
        allow write: if isOwner(userId) || isSuperAdmin();
      }
      
      // Subcolección de quiz results
      match /quizResults/{quizId} {
        allow read: if isOwner(userId) || isSuperAdmin();
        allow write: if isOwner(userId);
      }
      
      // Subcolección de mini quiz results
      match /miniQuizResults/{quizId} {
        allow read: if isOwner(userId) || isSuperAdmin();
        allow write: if isOwner(userId);
      }
      
      // Subcolección learningData
      match /learningData/{dataId} {
        allow read: if isOwner(userId) || isSuperAdmin();
        allow write: if isOwner(userId);
      }
      
      // Otras subcolecciones
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: materias
    // ========================================
    match /materias/{materiaId} {
      // Lectura: propietario, super admin, o cualquier usuario autenticado
      allow read: if isAuthenticated();
      
      // Creación: usuario autenticado (profesor o regular)
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['title', 'userId']);
      
      // Actualización y eliminación: solo propietario
      allow update, delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: notebooks
    // ========================================
    match /notebooks/{notebookId} {
      // Función helper para obtener el dueño del notebook
      function getNotebookOwner() {
        return get(/databases/$(database)/documents/notebooks/$(notebookId)).data.userId;
      }
      
      // Función helper para obtener la materia del notebook
      function getNotebookMateria() {
        return get(/databases/$(database)/documents/notebooks/$(notebookId)).data.materiaId;
      }
      
      // Función helper para verificar si el usuario tiene acceso a la materia
      function hasAccessToMateria(materiaId) {
        return exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + materiaId)) ||
               exists(/databases/$(database)/documents/materias/$(materiaId));
      }
      
      // Lectura: propietario, profesores, estudiantes inscritos en la materia, o super admin
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin() ||
        // Permitir si es profesor (pueden ver sus propios notebooks)
        isTeacher() ||
        // Permitir si el estudiante está inscrito en la materia del notebook
        (resource.data.materiaId != null && 
         hasAccessToMateria(resource.data.materiaId)) ||
        // Permitir acceso durante el proceso de inscripción
        (resource.data.materiaId != null && isAuthenticated()) ||
        resource == null
      );
      
      // Creación: usuario autenticado con límites de suscripción
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.title.size() <= 100 &&
        canCreateNotebook();
      
      // Actualización: solo propietario
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        // No permitir cambiar el propietario
        request.resource.data.userId == resource.data.userId;
      
      // Eliminación: propietario o super admin
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // ========================================
      // SUBCOLECCIÓN: concepts
      // ========================================
      match /concepts/{conceptId} {
        // Lectura: mismo acceso que el notebook padre
        allow read: if isAuthenticated() && (
          isOwner(getNotebookOwner()) ||
          isSuperAdmin() ||
          isTeacher() ||
          hasAccessToMateria(getNotebookMateria()) ||
          isAuthenticated()
        );
        
        // Creación y actualización: solo el propietario del notebook
        allow create, update: if isAuthenticated() && 
          isOwner(getNotebookOwner());
        
        // Eliminación: propietario del notebook o super admin
        allow delete: if isAuthenticated() && (
          isOwner(getNotebookOwner()) ||
          isSuperAdmin()
        );
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: schoolNotebooks (legacy - para compatibilidad)
    // ========================================
    match /schoolNotebooks/{notebookId} {
      // Lectura: permitir a cualquier usuario autenticado (para listeners de notificaciones)
      allow read: if isAuthenticated();
      
      // No permitir creación de nuevos schoolNotebooks (deprecated)
      allow create: if false;
      
      // Actualización: solo super admin para migración
      allow update: if isSuperAdmin();
      
      // Eliminación: solo super admin
      allow delete: if isSuperAdmin();
      
      // ========================================
      // SUBCOLECCIÓN: concepts dentro de schoolNotebooks
      // ========================================
      match /concepts/{conceptId} {
        // Lectura: mismo acceso que el notebook padre
        allow read: if isAuthenticated() && (
          isSuperAdmin() ||
          isTeacher() ||
          isEnrolledUser() ||
          isAuthenticated()
        );
        
        // No permitir modificaciones (solo lectura para legacy)
        allow create, update, delete: if false;
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: conceptos
    // ========================================
    match /conceptos/{conceptId} {
      // Lectura: propietario, profesores, estudiantes con acceso al notebook, o super admin
      allow read: if isAuthenticated() && (
        resource == null ||
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin() ||
        isTeacher() ||
        // Permitir si el estudiante tiene acceso al notebook del concepto
        (resource.data.cuadernoId != null && 
         exists(/databases/$(database)/documents/notebooks/$(resource.data.cuadernoId)) &&
         (get(/databases/$(database)/documents/notebooks/$(resource.data.cuadernoId)).data.userId == request.auth.uid ||
          (get(/databases/$(database)/documents/notebooks/$(resource.data.cuadernoId)).data.materiaId != null))) ||
        // Permitir acceso durante el proceso de inscripción
        (resource.data.cuadernoId != null && isAuthenticated())
      );
      
      // Creación: usuario autenticado propietario
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.usuarioId) &&
        hasRequiredFields(['termino', 'definicion', 'fuente', 'cuadernoId', 'usuarioId']) &&
        isValidString(request.resource.data.termino, 200) &&
        isValidString(request.resource.data.definicion, 2000) &&
        isValidString(request.resource.data.fuente, 500);
      
      // Actualización: propietario
      allow update: if isAuthenticated() && 
        isOwner(resource.data.usuarioId) &&
        // No permitir cambiar propietario o cuaderno
        request.resource.data.usuarioId == resource.data.usuarioId &&
        request.resource.data.cuadernoId == resource.data.cuadernoId;
      
      // Eliminación: propietario o super admin
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: enrollments
    // ========================================
    match /enrollments/{enrollmentId} {
      // Lectura: cualquier usuario autenticado puede leer enrollments (necesario para rankings y colaboración)
      allow read: if isAuthenticated();
      
      // Creación: profesor agregando estudiante o estudiante inscribiéndose
      allow create: if isAuthenticated() && (
        // Profesor agregando estudiante directamente
        (isTeacher() && 
         request.resource.data.teacherId == request.auth.uid &&
         hasRequiredFields(['studentId', 'teacherId', 'materiaId', 'enrolledAt', 'status'])) ||
        // Estudiante inscribiéndose con código de invitación
        (request.resource.data.studentId == request.auth.uid &&
         hasRequiredFields(['studentId', 'teacherId', 'materiaId', 'enrolledAt', 'status'])) ||
        isSuperAdmin()
      );
      
      // Actualización: profesor o estudiante actualizando su inscripción
      allow update: if isAuthenticated() && (
        (resource.data.teacherId == request.auth.uid && isTeacher()) ||
        (resource.data.studentId == request.auth.uid) ||
        isSuperAdmin()
      );
      
      // Eliminación: profesor o super admin
      allow delete: if isAuthenticated() && (
        (resource.data.teacherId == request.auth.uid && isTeacher()) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: schoolSubjects
    // ========================================
    match /schoolSubjects/{subjectId} {
      // Lectura: profesores creadores, estudiantes inscritos, o super admin
      allow read: if isAuthenticated() && (
        isSuperAdmin() ||
        (resource.data.idProfesor == request.auth.uid && isTeacher()) ||
        // Permitir a estudiantes con enrollments activos leer las materias
        exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + subjectId)) ||
        // Permitir a cualquier usuario autenticado leer info básica de materias
        isAuthenticated()
      );
      
      // Creación: profesores autenticados
      allow create: if isTeacher() &&
        request.resource.data.idProfesor == request.auth.uid &&
        hasRequiredFields(['nombre', 'idProfesor']);
      
      // Actualización: profesor creador o super admin
      allow update: if isAuthenticated() && (
        (resource.data.idProfesor == request.auth.uid && isTeacher()) ||
        isSuperAdmin()
      );
      
      // Eliminación: profesor creador o super admin
      allow delete: if isAuthenticated() && (
        (resource.data.idProfesor == request.auth.uid && isTeacher()) ||
        isSuperAdmin()
      );
      
      // ========================================
      // SUBCOLECCIÓN: documents
      // ========================================
      match /documents/{documentId} {
        // Lectura: profesor creador, estudiantes inscritos, o super admin
        allow read: if isAuthenticated() && (
          isSuperAdmin() ||
          // Obtener datos de la materia padre
          (get(/databases/$(database)/documents/schoolSubjects/$(subjectId)).data.idProfesor == request.auth.uid && isTeacher()) ||
          // Permitir a estudiantes con enrollments activos
          exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + subjectId)) ||
          isAuthenticated()
        );
        
        // Creación: profesor de la materia
        allow create: if isAuthenticated() && isTeacher() &&
          get(/databases/$(database)/documents/schoolSubjects/$(subjectId)).data.idProfesor == request.auth.uid;
        
        // Actualización: profesor de la materia
        allow update: if isAuthenticated() && isTeacher() &&
          get(/databases/$(database)/documents/schoolSubjects/$(subjectId)).data.idProfesor == request.auth.uid;
        
        // Eliminación: profesor de la materia o super admin
        allow delete: if isAuthenticated() && (
          (isTeacher() && get(/databases/$(database)/documents/schoolSubjects/$(subjectId)).data.idProfesor == request.auth.uid) ||
          isSuperAdmin()
        );
      }
    }

    // ========================================
    // REGLAS PARA COLECCIÓN: inviteCodes
    // ========================================
    match /inviteCodes/{codeId} {
      // Lectura: pública para validar códigos
      allow read: if true;
      
      // Creación: profesores o super admin
      allow create: if (isTeacher() || isSuperAdmin()) &&
        request.resource.data.teacherId == request.auth.uid &&
        hasRequiredFields(['code', 'teacherId', 'materiaId', 'createdAt', 'isActive']);
      
      // Actualización: profesor creador o sistema
      allow update: if isAuthenticated() && (
        (resource.data.teacherId == request.auth.uid && isTeacher()) ||
        // Permitir incrementar usos cuando un estudiante se inscribe
        (request.resource.data.currentUses == resource.data.currentUses + 1) ||
        isSuperAdmin()
      );
      
      // Eliminación: profesor creador o super admin
      allow delete: if isAuthenticated() && (
        (resource.data.teacherId == request.auth.uid && isTeacher()) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: teacherProfiles
    // ========================================
    match /teacherProfiles/{profileId} {
      // Lectura: público para profesores activos, privado para pendientes
      allow read: if isAuthenticated() && (
        isSuperAdmin() ||
        resource.data.isActive == true ||
        profileId == request.auth.uid
      );
      
      // Creación: usuario solicitando ser profesor
      allow create: if isAuthenticated() && 
        profileId == request.auth.uid &&
        hasRequiredFields(['userId', 'isActive']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.isActive == false; // Siempre inicia como inactivo
      
      // Actualización: propio profesor (sin auto-aprobarse) o super admin
      allow update: if isAuthenticated() && (
        (profileId == request.auth.uid && 
         request.resource.data.isActive == resource.data.isActive) ||
        isSuperAdmin()
      );
      
      // Eliminación: solo super admin
      allow delete: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: studySessions
    // ========================================
    match /studySessions/{sessionId} {
      // Lectura: propietario o super admin
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId);
      
      // Actualización: propietario
      allow update: if isAuthenticated() &&
        isOwner(resource.data.userId);
      
      // Eliminación: nunca (datos históricos)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: exams
    // ========================================
    match /exams/{examId} {
      // Lectura: profesor creador, usuarios con isEnrolled, o super admin
      allow read: if isAuthenticated() && (
        (isTeacher() && resource.data.idProfesor == request.auth.uid) ||
        // Permitir a usuarios con isEnrolled leer exámenes
        isEnrolledUser() ||
        isSuperAdmin()
      );
      
      // Creación: solo profesores
      allow create: if isTeacher() &&
        hasRequiredFields(['title', 'idProfesor', 'idMateria']) &&
        request.resource.data.idProfesor == request.auth.uid;
      
      // Actualización: profesor creador
      allow update: if isTeacher() &&
        resource.data.idProfesor == request.auth.uid;
      
      // Eliminación: profesor creador o super admin
      allow delete: if (
        (isTeacher() && resource.data.idProfesor == request.auth.uid) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: examAttempts
    // ========================================
    match /examAttempts/{attemptId} {
      // Lectura: estudiante propietario, profesor del examen, o super admin
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) ||
        isTeacher() ||
        isSuperAdmin()
      );
      
      // Creación: estudiante tomando el examen
      allow create: if isAuthenticated() &&
        request.resource.data.studentId == request.auth.uid;
      
      // Actualización: estudiante completando el examen
      allow update: if isAuthenticated() &&
        isOwner(resource.data.studentId);
      
      // Eliminación: nunca (datos históricos)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: materials
    // ========================================
    match /materials/{materialId} {
      // Lectura: propietario o estudiantes con acceso al notebook
      allow read: if isAuthenticated() && (
        resource == null ||
        isOwner(resource.data.userId) ||
        isSuperAdmin() ||
        // Similar lógica que conceptos para estudiantes inscritos
        (resource.data.notebookId != null && 
         exists(/databases/$(database)/documents/notebooks/$(resource.data.notebookId)) &&
         (get(/databases/$(database)/documents/notebooks/$(resource.data.notebookId)).data.userId == request.auth.uid ||
          (get(/databases/$(database)/documents/notebooks/$(resource.data.notebookId)).data.materiaId != null))) ||
        // Permitir acceso durante el proceso de inscripción
        (resource.data.notebookId != null && isAuthenticated())
      );
      
      // Creación: usuario autenticado con límites
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['name', 'type', 'size', 'url', 'notebookId', 'userId']) &&
        request.resource.data.size <= 10485760; // 10MB máximo
      
      // Actualización y eliminación: propietario
      allow update, delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: userActivities
    // ========================================
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: learningData
    // ========================================
    match /learningData/{dataId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['conceptId', 'userId', 'easeFactor', 'interval', 'repetitions']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: gameSessions
    // ========================================
    match /gameSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'gameName', 'points']);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DE KPIs Y MÉTRICAS
    // ========================================
    match /kpis/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /userKPIs/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /userStreaks/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /gamePoints/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /notebookPoints/{pointId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /quizStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /positionHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /conceptStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: calendarEvents
    // ========================================
    match /calendarEvents/{eventId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['title', 'date', 'userId']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: contactMessages
    // ========================================
    match /contactMessages/{messageId} {
      allow read: if isSuperAdmin();
      // Permitir a cualquier persona (autenticada o no) enviar mensajes de contacto
      allow create: if request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.email is string &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0 &&
        request.resource.data.subject is string;
      allow update, delete: if isSuperAdmin();
    }

    // ========================================
    // REGLAS PARA COLECCIÓN: proRequests
    // ========================================
    match /proRequests/{requestId} {
      // Lectura: solo super admin puede ver todas las solicitudes
      allow read: if isSuperAdmin();
      
      // Creación: cualquier usuario autenticado puede solicitar Pro
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        hasRequiredFields(['userId', 'userEmail', 'userName', 'currentSubscription', 'status', 'requestedAt']) &&
        isValidString(request.resource.data.userEmail, 254) &&
        isValidString(request.resource.data.userName, 100) &&
        isValidEnum(request.resource.data.status, ['pending', 'approved', 'rejected']) &&
        request.resource.data.status == 'pending' && // Solo se puede crear como pending
        isValidTimestamp(request.resource.data.requestedAt);
      
      // Actualización: solo super admin puede aprobar/rechazar
      allow update: if isSuperAdmin();
      
      // Eliminación: solo super admin
      allow delete: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: systemSettings
    // ========================================
    match /systemSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: domainProgress
    // ========================================
    match /domainProgress/{progressId} {
      // Lectura: propietario o profesores de estudiantes inscritos
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Escritura: propietario
      allow create, update: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      
      // Eliminación: nunca (datos históricos)
      allow delete: if false;
    }

    // ========================================
    // REGLAS PARA COLECCIÓN: notifications
    // ========================================
    match /notifications/{notificationId} {
      // Lectura: propietario de la notificación o super admin
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Creación: sistema o profesores (para crear notificaciones para estudiantes)
      allow create: if isAuthenticated() && (
        // Sistema creando notificaciones automáticas
        request.resource.data.userId is string &&
        hasRequiredFields(['type', 'title', 'message', 'materiaId', 'materiaName', 'teacherName', 'createdAt', 'isRead', 'userId', 'contentId']) &&
        isValidEnum(request.resource.data.type, ['new_notebook', 'new_document', 'new_concept']) &&
        isValidString(request.resource.data.title, 200) &&
        isValidString(request.resource.data.message, 500) &&
        isValidString(request.resource.data.materiaId, 100) &&
        isValidString(request.resource.data.materiaName, 200) &&
        isValidString(request.resource.data.teacherName, 200) &&
        isValidString(request.resource.data.contentId, 100) &&
        request.resource.data.isRead == false // Nueva notificación siempre no leída
      );
      
      // Actualización: propietario para marcar como leída o super admin
      allow update: if isAuthenticated() && (
        (isOwner(resource.data.userId) && 
         // Solo permitir cambiar isRead y readAt
         request.resource.data.userId == resource.data.userId &&
         request.resource.data.type == resource.data.type &&
         request.resource.data.title == resource.data.title &&
         request.resource.data.message == resource.data.message &&
         request.resource.data.materiaId == resource.data.materiaId &&
         request.resource.data.contentId == resource.data.contentId) ||
        isSuperAdmin()
      );
      
      // Eliminación: super admin solamente (para limpiar notificaciones antiguas)
      allow delete: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS ESPECIALES PARA SUPER ADMIN
    // ========================================
    // Permitir al super admin leer todas las colecciones para analytics
    match /{collection}/{document=**} {
      allow read: if isSuperAdmin() && collection in [
        'learningData', 'quizStats', 'examAttempts', 'positionHistory',
        'gamePoints', 'gameSessions', 'userTickets', 'userStreaks',
        'notebookPoints', 'conceptStats', 'reviewConcepts', 'userActivityBatch',
        'systemLogs', 'passwordResets', 'temporaryCredentials'
      ];
    }
    
    // ========================================
    // REGLA DE SEGURIDAD POR DEFECTO
    // ========================================
    // Denegar todo acceso no especificado explícitamente
    match /{document=**} {
      allow read, write: if false;
    }
  }
}