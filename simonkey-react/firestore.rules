rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    
    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Get user document (with safe fallback for new users)
    function getUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }
    
    // Check if user is super admin
    function isSuperAdmin() {
      return isSignedIn() && getUserData() != null && getUserData().subscription == 'SUPER_ADMIN';
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Check user subscription type (with fallback for new users)
    function hasSubscription(subscriptionType) {
      return isSignedIn() && getUserData() != null && getUserData().subscription == subscriptionType;
    }
    
    // Check if user has school role (with fallback for new users)
    function hasSchoolRole(role) {
      return isSignedIn() && getUserData() != null && getUserData().subscription == 'SCHOOL' && getUserData().schoolRole == role;
    }
    
    // Check if notebook is shared publicly
    function isSharedNotebook(notebookId) {
      return exists(/databases/$(database)/documents/notebooks/$(notebookId)) && 
             get(/databases/$(database)/documents/notebooks/$(notebookId)).data.shareId != null;
    }
    
    // ========== USERS COLLECTION ==========
    match /users/{userId} {
      // Read: User can read their own data, super admin can read any
      allow read: if isOwner(userId) || isSuperAdmin();
      
      // Create: Allow users to create their own profile during signup
      allow create: if isOwner(userId) && 
                      request.resource.data.email != null &&
                      request.resource.data.subscription in ['FREE', 'PRO', 'SCHOOL', 'SUPER_ADMIN'];
      
      // Update: User can update their own profile (including all fields for first-time setup)
      allow update: if isOwner(userId) || isSuperAdmin();
      
      // Delete: Only super admin
      allow delete: if isSuperAdmin();
      
      // ========== USER SUBCOLLECTIONS ==========
      
      // Learning Data
      match /learningData/{conceptId} {
        allow read, write: if isOwner(userId);
      }
      
      // Notebook Limits
      match /notebookLimits/{notebookId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) || isSuperAdmin();
      }
      
      // Quiz Results
      match /quizResults/{resultId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update, delete: if false; // Results are immutable
      }
      
      // Stats
      match /stats/{statId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // Settings
      match /settings/{settingId} {
        allow read, write: if isOwner(userId);
      }
      
      // Limits
      match /limits/{limitId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========== NOTEBOOKS COLLECTION ==========
    match /notebooks/{notebookId} {
      // Read: Owner, super admin, or publicly shared
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) ||
                    isSuperAdmin() ||
                    (resource.data.shareId != null); // Public sharing
      
      // Create: Authenticated users with proper limits
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['title', 'color', 'userId', 'createdAt']);
      
      // Update: Owner or super admin
      allow update: if (isOwner(resource.data.userId) && 
                       request.resource.data.userId == resource.data.userId) || // Can't change owner
                      isSuperAdmin();
      
      // Delete: Owner or super admin
      allow delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========== CONCEPTOS COLLECTION ==========
    match /conceptos/{conceptId} {
      // Read: Owner of the notebook or super admin
      allow read: if isSignedIn() && 
                    (resource.data.usuarioId == request.auth.uid ||
                     isSuperAdmin() ||
                     isSharedNotebook(resource.data.cuadernoId));
      
      // Create: Owner of the notebook
      allow create: if isSignedIn() && 
                      request.resource.data.usuarioId == request.auth.uid &&
                      exists(/databases/$(database)/documents/notebooks/$(request.resource.data.cuadernoId)) &&
                      get(/databases/$(database)/documents/notebooks/$(request.resource.data.cuadernoId)).data.userId == request.auth.uid;
      
      // Update: Owner only
      allow update: if isOwner(resource.data.usuarioId) &&
                      request.resource.data.usuarioId == resource.data.usuarioId; // Can't change owner
      
      // Delete: Owner or super admin
      allow delete: if isOwner(resource.data.usuarioId) || isSuperAdmin();
    }
    
    // ========== SCHOOL COLLECTIONS ==========
    
    // School Students - More permissive for development
    match /schoolStudents/{studentId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Teachers - More permissive for development
    match /schoolTeachers/{teacherId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Admins
    match /schoolAdmins/{adminId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Institutions
    match /schoolInstitutions/{institutionId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Subjects
    match /schoolSubjects/{subjectId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Notebooks
    match /schoolNotebooks/{notebookId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Concepts
    match /schoolConcepts/{conceptId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // School Tutors
    match /schoolTutors/{tutorId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }
    
    // ========== STUDY & ACTIVITY COLLECTIONS ==========
    
    // Study Sessions
    match /studySessions/{sessionId} {
      allow read: if isOwner(resource.data.userId) || isSuperAdmin();
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId);
      allow delete: if false; // Sessions are immutable
    }
    
    // Review Concepts
    match /reviewConcepts/{reviewId} {
      allow read, write: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // Concept Stats
    match /conceptStats/{statId} {
      allow read: if isOwner(resource.data.userId) || isSuperAdmin();
      allow write: if isOwner(resource.data.userId);
    }
    
    // User Activities
    match /userActivities/{activityId} {
      allow read: if isOwner(resource.data.userId) || isSuperAdmin();
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Activities are immutable
    }
    
    // ========== SYSTEM COLLECTIONS ==========
    
    // System Settings (read-only for all authenticated users)
    match /systemSettings/{settingId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // Subscription Limits (read-only for all authenticated users)
    match /subscriptionLimits/{limitId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // School Role Permissions (read-only for all authenticated users)
    match /schoolRolePermissions/{permissionId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // User Deletions
    match /userDeletions/{deletionId} {
      allow read: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && 
                      request.resource.data.status in ['pending', 'processing', 'completed', 'failed'];
      allow delete: if false;
    }
    
    // System Logs
    match /systemLogs/{logId} {
      allow read: if isSuperAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false; // Logs are immutable
    }
    
    // ========== LEGACY COLLECTIONS ==========
    
    // Usuarios (Spanish version - being phased out)
    match /usuarios/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow write: if false; // Read-only, being migrated
    }
    
    // Activity
    match /activity/{activityId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Deprecated
    }
    
    // Concepts Individual
    match /concepts_individual/{conceptId} {
      allow read: if isSignedIn();
      allow write: if false; // Deprecated
    }
    
    // ========== DEFAULT DENY ==========
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}