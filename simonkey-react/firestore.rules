rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // FUNCIONES HELPER OPTIMIZADAS
    // ========================================
    
    // Cache del documento de usuario para reducir lecturas
    function getUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data
        : {};
    }
    
    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar si es el propietario del recurso
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Obtener tipo de suscripción del usuario
    function getUserSubscription() {
      return getUserData().subscription != null ? getUserData().subscription : 'free';
    }
    
    // Verificar si es super admin
    function isSuperAdmin() {
      return isAuthenticated() && (
        getUserSubscription() == 'super_admin' ||
        request.auth.token.email == 'ruben.elhore@gmail.com'
      );
    }
    
    // Verificar si es usuario escolar
    function isSchoolUser() {
      return isAuthenticated() && getUserSubscription() == 'school';
    }
    
    // Obtener rol escolar del usuario
    function getSchoolRole() {
      return isSchoolUser() ? getUserData().schoolRole : null;
    }
    
    // Verificar rol escolar específico
    function hasSchoolRole(role) {
      return isSchoolUser() && getSchoolRole() == role;
    }
    
    // Verificar si es admin o profesor escolar
    function isSchoolAdminOrTeacher() {
      return hasSchoolRole('admin') || hasSchoolRole('teacher');
    }
    
    // Verificar si pertenece a la misma institución
    function isSameInstitution(institutionId) {
      return isSchoolUser() && getUserData().idInstitucion == institutionId;
    }
    
    // Validar límites de suscripción para notebooks
    function canCreateNotebook() {
      return getUserSubscription() == 'super_admin' || 
             getUserSubscription() == 'school' ||
             getUserSubscription() == 'university' ||
             (getUserSubscription() == 'free' && 
              (getUserData().notebookCount == null || getUserData().notebookCount < 4)) ||
             getUserSubscription() == 'pro'; // PRO siempre puede crear (límites manejados en el cliente)
    }
    
    // Validar campos requeridos en request
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Validar tipo de dato
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // Validar timestamp
    function isValidTimestamp(field) {
      return field is timestamp;
    }
    
    // Validar enum
    function isValidEnum(field, values) {
      return field in values;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: users
    // ========================================
    match /users/{userId} {
      // Lectura: combinar get y list con las mismas reglas
      allow read: if isOwner(userId) || 
                     isSuperAdmin() ||
                     // Permitir a usuarios autenticados leer su propio documento por email
                     (isAuthenticated() && 
                      resource.data.email == request.auth.token.email) ||
                     // SIMPLIFICADO: Profesores pueden leer CUALQUIER usuario escolar
                     hasSchoolRole('teacher') ||
                     // Admin escolar puede leer cualquier usuario escolar
                     hasSchoolRole('admin') ||
                     // Tutor puede leer estudiantes asignados
                     (hasSchoolRole('tutor') && 
                      userId in getUserData().idAlumnos) ||
                     // Estudiantes pueden leer otros estudiantes de la misma institución (para ranking)
                     (hasSchoolRole('student') && 
                      resource.data.schoolRole == 'student' &&
                      resource.data.idInstitucion == getUserData().idInstitucion);
      
      // Creación: solo el propio usuario al registrarse
      allow create: if isOwner(userId) &&
        hasRequiredFields(['email', 'username', 'nombre', 'displayName', 'birthdate', 'subscription']) &&
        isValidString(request.resource.data.email, 254) &&
        isValidString(request.resource.data.username, 50) &&
        isValidString(request.resource.data.nombre, 100) &&
        isValidString(request.resource.data.displayName, 100) &&
        isValidEnum(request.resource.data.subscription, ['free', 'pro', 'school', 'university', 'super_admin']);
      
      // Actualización: propietario, super admin, o admin escolar actualizando usuarios de su escuela
      allow update: if (isOwner(userId) || isSuperAdmin() ||
        // Admin escolar puede actualizar usuarios de su escuela
        (hasSchoolRole('admin') && resource.data.idAdmin == request.auth.uid)) &&
        // No permitir cambiar subscription excepto super admin
        (request.resource.data.subscription == resource.data.subscription || isSuperAdmin());
      
      // Eliminación: nunca directamente
      allow delete: if false;
      
      // Subcolecciones - permitir acceso a migrationStatus para estudiantes
      match /migrationStatus/{statusId} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
      
      // Otras subcolecciones
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: notebooks
    // ========================================
    match /notebooks/{notebookId} {
      // Lectura
      allow read: if isAuthenticated() && (
        // Notebooks personales: solo propietario (sin type o type == 'personal')
        ((resource.data.type == null || resource.data.type == 'personal') && isOwner(resource.data.userId)) ||
        // Notebooks escolares
        (resource.data.type == 'school' && (
          // Profesores y admins de la misma escuela
          (isSchoolAdminOrTeacher() && isSameInstitution(resource.data.idEscuela)) ||
          // Estudiantes asignados
          (hasSchoolRole('student') && notebookId in getUserData().idCuadernos) ||
          // Tutores de estudiantes asignados
          (hasSchoolRole('tutor'))
        )) ||
        // Permitir queries que retornan vacías para estudiantes escolares
        (hasSchoolRole('student') && resource == null) ||
        // Super admin
        isSuperAdmin()
      );
      
      // Creación - Funcional con validaciones básicas
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.title.size() <= 100;
      
      // Actualización
      allow update: if isAuthenticated() && (
        // Notebooks personales: propietario (sin type o type == 'personal')
        ((resource.data.type == null || resource.data.type == 'personal') && isOwner(resource.data.userId)) ||
        // Notebooks escolares: profesor creador
        (resource.data.type == 'school' && 
         hasSchoolRole('teacher') && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      ) &&
      // No permitir cambiar tipo o propietario
      (request.resource.data.type == null || request.resource.data.type == resource.data.type) &&
      (resource.data.userId == null || request.resource.data.userId == resource.data.userId);
      
      // Eliminación
      allow delete: if isAuthenticated() && (
        // Notebooks personales: propietario con permisos (sin type o type == 'personal')
        ((resource.data.type == null || resource.data.type == 'personal') && 
         isOwner(resource.data.userId) &&
         (getUserSubscription() != 'free' || resource.data.conceptCount == null || resource.data.conceptCount == 0)) ||
        // Notebooks escolares: profesor creador
        (resource.data.type == 'school' && 
         hasSchoolRole('teacher') && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: conceptos
    // ========================================
    match /conceptos/{conceptId} {
      // Lectura: propietario del concepto
      allow read: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
      
      // Creación
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.usuarioId) &&
        hasRequiredFields(['termino', 'definicion', 'fuente', 'cuadernoId', 'usuarioId']) &&
        isValidString(request.resource.data.termino, 200) &&
        isValidString(request.resource.data.definicion, 2000) &&
        isValidString(request.resource.data.fuente, 500);
      
      // Actualización: propietario
      allow update: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) || 
        isSuperAdmin()
      ) &&
      // No permitir cambiar propietario o cuaderno
      request.resource.data.usuarioId == resource.data.usuarioId &&
      request.resource.data.cuadernoId == resource.data.cuadernoId;
      
      // Eliminación: propietario
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: studySessions
    // ========================================
    match /studySessions/{sessionId} {
      // Lectura: propietario de la sesión
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        // Profesores pueden ver sesiones de sus estudiantes
        (hasSchoolRole('teacher') && 
         get(/databases/$(database)/documents/users/$(resource.data.userId)).data.idInstitucion == getUserData().idInstitucion) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId);
      
      // Actualización: propietario de la sesión
      allow update: if isAuthenticated() &&
        isOwner(resource.data.userId);
      
      // Eliminación: nunca (inmutable)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: schoolExams
    // ========================================
    match /schoolExams/{examId} {
      // Lectura: profesores de la escuela pueden leer exámenes
      allow read: if isAuthenticated() && (
        // El profesor creador puede leer su examen
        (hasSchoolRole('teacher') && resource.data.idProfesor == request.auth.uid) ||
        // Profesores de la misma escuela pueden ver exámenes
        (hasSchoolRole('teacher') && isSameInstitution(resource.data.idEscuela)) ||
        // Administradores escolares de la misma escuela
        (hasSchoolRole('admin') && isSameInstitution(resource.data.idEscuela)) ||
        // Estudiantes asignados al examen (cuando se implemente)
        (hasSchoolRole('student') && resource.data.isActive == true) ||
        // Super admin
        isSuperAdmin()
      );
      
      // Creación: solo profesores
      allow create: if hasSchoolRole('teacher') &&
        hasRequiredFields(['title', 'idMateria', 'idProfesor', 'idEscuela', 'questions', 'duration']) &&
        request.resource.data.idProfesor == request.auth.uid &&
        isValidString(request.resource.data.title, 200) &&
        request.resource.data.questions is list &&
        request.resource.data.duration is number;
      
      // Actualización: profesor creador
      allow update: if hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid;
      
      // Eliminación: profesor creador o admin escolar
      allow delete: if (
        (hasSchoolRole('teacher') && resource.data.idProfesor == request.auth.uid) ||
        (hasSchoolRole('admin') && isSameInstitution(resource.data.idEscuela)) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: examAttempts
    // ========================================
    match /examAttempts/{attemptId} {
      // Lectura: estudiante propietario o profesor
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) ||
        // Profesor puede leer intentos de sus exámenes
        (hasSchoolRole('teacher')) ||
        // Admin escolar puede leer intentos de su institución
        (hasSchoolRole('admin')) ||
        isSuperAdmin()
      );
      
      // Creación: estudiante tomando el examen (simplificado)
      allow create: if hasSchoolRole('student') &&
        request.resource.data.studentId == request.auth.uid;
      
      // Actualización: estudiante completando el examen
      allow update: if hasSchoolRole('student') &&
        isOwner(resource.data.studentId);
      
      // Eliminación: nunca
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: materials
    // ========================================
    match /materials/{materialId} {
      // Lectura: propietario del material
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado con límites
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['name', 'type', 'size', 'url', 'notebookId', 'userId']) &&
        request.resource.data.size <= 10485760; // 10MB máximo
      
      // Actualización: propietario
      allow update: if isOwner(resource.data.userId) || isSuperAdmin();
      
      // Eliminación: propietario
      allow delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: calendarEvents
    // ========================================
    match /calendarEvents/{eventId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['title', 'date', 'userId']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: userActivities
    // ========================================
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: learningData
    // ========================================
    match /learningData/{dataId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['conceptId', 'userId', 'easeFactor', 'interval', 'repetitions']);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: gameSessions
    // ========================================
    match /gameSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        hasRequiredFields(['userId', 'gameName', 'points']);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DE KPIs
    // ========================================
    match /userKPIs/{userId} {
      allow read: if isOwner(userId) || 
        // Profesores pueden leer KPIs de cualquier usuario de su institución
        (hasSchoolRole('teacher') && isSchoolUser()) ||
        // Estudiantes pueden leer KPIs de cualquier usuario de su institución (para ranking)
        (hasSchoolRole('student') && isSchoolUser()) ||
        isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /userStreaks/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /gamePoints/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /notebookPoints/{pointId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /quizStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /positionHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /conceptStats/{statId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES ESCOLARES
    // ========================================
    match /schoolInstitutions/{institutionId} {
      // Permitir lectura a usuarios escolares y cuando se busca por ID específico
      allow read: if isAuthenticated() && (
        isSchoolUser() || 
        isSuperAdmin() ||
        // Permitir lectura cuando el ID coincide con la institución del usuario
        (getUserData().idInstitucion != null && getUserData().idInstitucion == institutionId)
      );
      allow create, update, delete: if isSuperAdmin();
    }
    
    match /schoolSubjects/{subjectId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow create: if (hasSchoolRole('teacher') &&
        hasRequiredFields(['nombre', 'idProfesor']) &&
        request.resource.data.idProfesor == request.auth.uid) ||
        // Admin escolar puede crear materias con cualquier profesor
        (hasSchoolRole('admin') && 
         request.resource.data.nombre is string) ||
        isSuperAdmin();
      allow update, delete: if (hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid) ||
        hasSchoolRole('admin') ||
        isSuperAdmin();
    }
    
    match /schoolTeachers/{teacherId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolStudents/{studentId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || 
        hasSchoolRole('teacher') || 
        isSuperAdmin();
    }
    
    match /schoolTutors/{tutorId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolAdmins/{adminId} {
      allow read: if isSchoolUser() || isSuperAdmin() || 
                     // Permitir que el sistema lea info del admin
                     (isAuthenticated() && adminId == request.auth.uid);
      allow write: if isSuperAdmin();
    }
    
    // Métricas de profesores
    match /teacherMetrics/{metricId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('teacher') || 
                      hasSchoolRole('admin') || 
                      isSuperAdmin();
    }
    
    // KPIs de profesores
    match /teacherKpis/{kpiId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('teacher') || 
                      hasSchoolRole('admin') || 
                      isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES LEGACY
    // ========================================
    match /schoolNotebooks/{notebookId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow create, update: if isSchoolAdminOrTeacher() || isSuperAdmin();
      allow delete: if hasSchoolRole('teacher') || hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolConcepts/{conceptId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow create, update, delete: if isSchoolAdminOrTeacher() || isSuperAdmin();
    }
    
    match /materias/{materiaId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /usuarios/{userId} {
      // Mantener compatibilidad con colección legacy
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if false;
      
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DEL SISTEMA
    // ========================================
    match /contactMessages/{messageId} {
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated() &&
        hasRequiredFields(['name', 'email', 'message', 'timestamp']);
      allow update, delete: if isSuperAdmin();
    }
    
    match /temporaryCredentials/{credentialId} {
      allow read: if hasSchoolRole('admin') || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /passwordResets/{resetId} {
      allow read: if hasSchoolRole('admin') || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /systemSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    match /systemLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userActivityBatch/{batchId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    match /reviewConcepts/{conceptId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: domainProgress
    // ========================================
    match /domainProgress/{progressId} {
      // Lectura: propietario del progreso o profesores de la misma escuela
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        // Profesores pueden ver progreso de estudiantes de su escuela
        (hasSchoolRole('teacher') && 
         get(/databases/$(database)/documents/users/$(resource.data.userId)).data.idInstitucion == getUserData().idInstitucion) ||
        isSuperAdmin()
      );
      
      // Escritura: propietario del progreso
      allow create, update: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      
      // Eliminación: nunca (datos históricos)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: institutionRankings
    // ========================================
    match /institutionRankings/{institutionId} {
      // Permitir lectura a usuarios escolares de la misma institución
      allow read: if isAuthenticated() && (
        isSameInstitution(institutionId) ||
        isSuperAdmin()
      );
      
      // Solo el sistema puede escribir (mediante Cloud Functions o admin SDK)
      allow write: if false;
      
      // Subcolección de rankings
      match /rankings/{rankingId} {
        allow read: if isAuthenticated() && (
          isSameInstitution(institutionId) ||
          isSuperAdmin()
        );
        allow write: if false;
      }
    }
    
    // ========================================
    // REGLA DE SEGURIDAD POR DEFECTO
    // ========================================
    // Denegar todo acceso no especificado explícitamente
    match /{document=**} {
      allow read, write: if false;
    }
  }
}