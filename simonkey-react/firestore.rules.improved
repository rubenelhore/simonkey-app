rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // FUNCIONES HELPER MEJORADAS
    // ========================================
    
    // Verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar si es el propietario del recurso
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Obtener datos del usuario de forma segura
    function getUserDataSafe() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data
        : {'subscription': 'free', 'notebookCount': 0};
    }
    
    // Obtener tipo de suscripción del usuario
    function getUserSubscriptionSafe() {
      let userData = getUserDataSafe();
      return userData.subscription != null ? userData.subscription : 'free';
    }
    
    // Verificar si es super admin
    function isSuperAdmin() {
      return isAuthenticated() && (
        getUserSubscriptionSafe() == 'super_admin' ||
        request.auth.token.email == 'ruben.elhore@gmail.com'
      );
    }
    
    // Verificar si es usuario escolar
    function isSchoolUser() {
      return isAuthenticated() && getUserSubscriptionSafe() == 'school';
    }
    
    // Obtener rol escolar del usuario
    function getSchoolRole() {
      let userData = getUserDataSafe();
      return userData.schoolRole != null ? userData.schoolRole : null;
    }
    
    // Verificar rol escolar específico
    function hasSchoolRole(role) {
      return isSchoolUser() && getSchoolRole() == role;
    }
    
    // Verificar si es admin o profesor escolar
    function isSchoolAdminOrTeacher() {
      return hasSchoolRole('admin') || hasSchoolRole('teacher');
    }
    
    // Verificar límites básicos para notebooks
    function canCreateNotebookSimple() {
      let subscription = getUserSubscriptionSafe();
      // Permitir a todos los usuarios crear notebooks
      // Los límites específicos se manejan en el cliente
      return subscription == 'super_admin' || 
             subscription == 'school' ||
             subscription == 'university' ||
             subscription == 'pro' ||
             subscription == 'free';
    }
    
    // Validar tipo de dato string con longitud
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: users
    // ========================================
    match /users/{userId} {
      // Lectura: propietario o super admin
      allow read: if isOwner(userId) || isSuperAdmin();
      
      // Creación: solo el propio usuario al registrarse
      allow create: if isOwner(userId) &&
        request.resource.data.email is string &&
        request.resource.data.username is string &&
        request.resource.data.subscription is string;
      
      // Actualización: propietario o super admin
      allow update: if isOwner(userId) || isSuperAdmin();
      
      // Eliminación: nunca directamente
      allow delete: if false;
      
      // Subcolecciones
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: notebooks
    // ========================================
    match /notebooks/{notebookId} {
      // Lectura
      allow read: if isAuthenticated() && (
        // Notebooks personales: propietario
        isOwner(resource.data.userId) ||
        // Notebooks escolares (con idProfesor)
        (resource.data.idProfesor != null && isSchoolUser()) ||
        // Super admin
        isSuperAdmin()
      );
      
      // Creación - Mejorada y robusta
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.title is string &&
        request.resource.data.title.size() <= 100 &&
        canCreateNotebookSimple();
      
      // Actualización
      allow update: if isAuthenticated() && (
        // Propietario del notebook
        isOwner(resource.data.userId) ||
        // Profesor creador (para notebooks escolares)
        (resource.data.idProfesor != null && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      ) &&
      // No permitir cambiar el propietario
      (request.resource.data.userId == resource.data.userId);
      
      // Eliminación
      allow delete: if isAuthenticated() && (
        // Propietario
        isOwner(resource.data.userId) ||
        // Profesor creador
        (resource.data.idProfesor != null && 
         resource.data.idProfesor == request.auth.uid) ||
        // Super admin
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: conceptos
    // ========================================
    match /conceptos/{conceptId} {
      // Lectura: propietario del concepto
      allow read: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
      
      // Creación
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.usuarioId) &&
        request.resource.data.cuadernoId is string;
      
      // Actualización: propietario
      allow update: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) || 
        isSuperAdmin()
      ) &&
      // No permitir cambiar propietario o cuaderno
      request.resource.data.usuarioId == resource.data.usuarioId &&
      request.resource.data.cuadernoId == resource.data.cuadernoId;
      
      // Eliminación: propietario
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.usuarioId) ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: studySessions
    // ========================================
    match /studySessions/{sessionId} {
      // Lectura: propietario de la sesión
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      // Creación: usuario autenticado
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        request.resource.data.notebookId is string;
      
      // Actualización: propietario para completar sesión
      allow update: if isAuthenticated() &&
        isOwner(resource.data.userId);
      
      // Eliminación: nunca (inmutable)
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: schoolExams
    // ========================================
    match /schoolExams/{examId} {
      // Lectura: usuarios escolares
      allow read: if isSchoolUser() || isSuperAdmin();
      
      // Creación: solo profesores
      allow create: if hasSchoolRole('teacher') &&
        request.resource.data.idProfesor == request.auth.uid &&
        request.resource.data.title is string;
      
      // Actualización: profesor creador
      allow update: if hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid;
      
      // Eliminación: profesor creador o admin
      allow delete: if (
        (hasSchoolRole('teacher') && resource.data.idProfesor == request.auth.uid) ||
        hasSchoolRole('admin') ||
        isSuperAdmin()
      );
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: examAttempts
    // ========================================
    match /examAttempts/{attemptId} {
      // Lectura: estudiante propietario o profesor
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) ||
        hasSchoolRole('teacher') ||
        hasSchoolRole('admin') ||
        isSuperAdmin()
      );
      
      // Creación: estudiante
      allow create: if hasSchoolRole('student') &&
        isOwner(request.resource.data.studentId);
      
      // Actualización: estudiante completando
      allow update: if hasSchoolRole('student') &&
        isOwner(resource.data.studentId);
      
      // Eliminación: nunca
      allow delete: if false;
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: materials
    // ========================================
    match /materials/{materialId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      
      allow create: if isAuthenticated() &&
        isOwner(request.resource.data.userId) &&
        request.resource.data.size <= 10485760; // 10MB máximo
      
      allow update: if isOwner(resource.data.userId) || isSuperAdmin();
      allow delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: calendarEvents
    // ========================================
    match /calendarEvents/{eventId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: userActivities
    // ========================================
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isSuperAdmin()
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: learningData
    // ========================================
    match /learningData/{dataId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }
    
    // ========================================
    // REGLAS PARA COLECCIÓN: gameSessions
    // ========================================
    match /gameSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if false; // Inmutable
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DE KPIs
    // ========================================
    match /userKPIs/{userId} {
      allow read: if isOwner(userId) || 
        hasSchoolRole('teacher') ||
        isSuperAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /userStreaks/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /gamePoints/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }
    
    match /notebookPoints/{pointId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /quizStats/{statId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /positionHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /conceptStats/{statId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES ESCOLARES
    // ========================================
    match /schoolInstitutions/{institutionId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();
    }
    
    match /schoolSubjects/{subjectId} {
      allow read: if isSchoolUser();
      allow create: if hasSchoolRole('teacher') &&
        request.resource.data.idProfesor == request.auth.uid;
      allow update, delete: if (hasSchoolRole('teacher') &&
        resource.data.idProfesor == request.auth.uid) ||
        isSuperAdmin();
    }
    
    match /schoolTeachers/{teacherId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolStudents/{studentId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || 
        hasSchoolRole('teacher') || 
        isSuperAdmin();
    }
    
    match /schoolTutors/{tutorId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /schoolAdmins/{adminId} {
      allow read: if isSchoolUser() || isSuperAdmin();
      allow write: if isSuperAdmin();
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES LEGACY
    // ========================================
    match /schoolNotebooks/{notebookId} {
      allow read: if isSchoolUser();
      allow create, update: if isSchoolAdminOrTeacher();
      allow delete: if hasSchoolRole('teacher') || isSuperAdmin();
    }
    
    match /schoolConcepts/{conceptId} {
      allow read: if isSchoolUser();
      allow create, update, delete: if isSchoolAdminOrTeacher() || isSuperAdmin();
    }
    
    match /materias/{materiaId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isSuperAdmin();
    }
    
    match /usuarios/{userId} {
      // Mantener compatibilidad con colección legacy
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if false;
      
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId) || isSuperAdmin();
      }
    }
    
    // ========================================
    // REGLAS PARA COLECCIONES DEL SISTEMA
    // ========================================
    match /contactMessages/{messageId} {
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isSuperAdmin();
    }
    
    match /temporaryCredentials/{credentialId} {
      allow read: if hasSchoolRole('admin') || isSuperAdmin();
      allow write: if hasSchoolRole('admin') || isSuperAdmin();
    }
    
    match /systemSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    match /systemLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userActivityBatch/{batchId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    match /reviewConcepts/{conceptId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // ========================================
    // REGLA DE SEGURIDAD POR DEFECTO
    // ========================================
    // Denegar todo acceso no especificado explícitamente
    match /{document=**} {
      allow read, write: if false;
    }
  }
}